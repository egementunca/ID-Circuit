Identity Circuit Factory - Installation Guide
===============================================

This guide provides step-by-step instructions for setting up the Identity Circuit Factory 
after cloning the repository. Tested on macOS, Linux, and should work on HPC clusters.

PREREQUISITES
=============
- Python 3.12+ (required for modern type hints)
- Git
- pip (Python package installer)
- C++ compiler (for SAT solver compilation)

QUICK START
===========

1. CLONE THE REPOSITORY
   git clone [your-repo-url]
   cd ID-Circuit

2. CREATE CLEAN PYTHON 3.12 ENVIRONMENT
   python3.12 -m venv .venv
   source .venv/bin/activate  # On Windows: .venv\Scripts\activate

3. UPGRADE CORE TOOLS
   pip install --upgrade pip setuptools wheel

4. INSTALL THE PROJECT
   pip install -e ".[dev]"

5. VERIFY INSTALLATION
   python -c "import identity_factory; print('✅ Installation successful!')"

6. TEST API SERVER (Optional)
   python start_api.py
   # Test in another terminal: curl http://localhost:8000/health

DETAILED INSTALLATION
====================

STEP 1: Environment Setup
-------------------------
# Ensure Python 3.12+ is available
python3.12 --version

# Create isolated virtual environment
python3.12 -m venv .venv
source .venv/bin/activate

# Verify correct Python version
python --version  # Should show Python 3.12.x

STEP 2: Install Dependencies
---------------------------
# Upgrade packaging tools
pip install --upgrade pip setuptools wheel

# Install project with all dependencies
pip install -e ".[dev]"

# This installs:
# - Core: qiskit, numpy, scipy, fastapi, uvicorn
# - SAT Solver: python-sat
# - API: httpx, pydantic, aioredis
# - Dev Tools: pytest, black, flake8, mypy

STEP 3: Verification
-------------------
# Test core imports
python -c "
import identity_factory
from identity_factory.api.server import run_server
from sat_revsynth.circuit.circuit import Circuit
print('✅ All imports successful!')
"

# Test SAT synthesis
python -c "
from sat_revsynth.circuit.circuit import Circuit
c = Circuit(3)
c.x(0).cx(0, 1).mcx([0, 1], 2)
print(f'✅ SAT synthesis works: {len(c)} gates')
"

DEPLOYMENT ENVIRONMENTS
======================

FOR HPC/SLURM CLUSTERS:
----------------------
# Load Python module if needed
module load python/3.12

# Use --user flag if no admin access
pip install --user -e ".[dev]"

# Set environment variables for job submission
export PYTHONPATH="/path/to/ID-Circuit:$PYTHONPATH"

FOR GOOGLE CLOUD PLATFORM:
--------------------------
# Install system dependencies
sudo apt-get update
sudo apt-get install -y python3.12 python3.12-venv python3.12-dev build-essential

# Follow standard installation steps
python3.12 -m venv .venv
source .venv/bin/activate
pip install -e ".[dev]"

FOR DOCKER DEPLOYMENT:
---------------------
# Use provided Dockerfile
docker build -t identity-factory .
docker run -p 8000:8000 identity-factory

USAGE EXAMPLES
==============

1. COMMAND LINE INTERFACE
   python -m identity_factory --help
   python -m identity_factory generate --width 3 --gates 5

2. API SERVER
   python start_api.py
   # Access at http://localhost:8000/docs for API documentation

3. PYTHON API
   from identity_factory import IdentityFactory
   factory = IdentityFactory()
   result = factory.generate_identity_circuit(width=3, gate_count=5)

TROUBLESHOOTING
===============

IMPORT ERRORS:
- Ensure Python 3.12+ is being used
- Verify virtual environment is activated
- Check all dependencies installed: pip list

MISSING DEPENDENCIES:
- python-sat not found: pip install python-sat
- C++ compiler errors: Install build-essential (Linux) or Xcode (macOS)

API SERVER ISSUES:
- Port 8000 in use: Change port in start_api.py
- Import errors: Verify all model imports are correct

PERFORMANCE ISSUES:
- Large circuits: Increase memory limits
- Slow SAT solving: Consider using different solver backend

DEVELOPMENT SETUP
=================

FOR CONTRIBUTORS:
-----------------
# Install development dependencies
pip install -e ".[dev]"

# Run tests
pytest tests/ -v

# Code formatting
black identity_factory/ sat_revsynth/
flake8 identity_factory/ sat_revsynth/

# Type checking
mypy identity_factory/

ENVIRONMENT VARIABLES
====================
# Optional configuration
export REDIS_URL="redis://localhost:6379"  # For job queue
export DATABASE_URL="sqlite:///circuits.db"  # Custom database
export LOG_LEVEL="INFO"  # Logging level

ARCHITECTURE NOTES
==================
- Uses modern Python 3.12 type hints (list[int] | None syntax)
- SAT-based quantum circuit synthesis
- FastAPI for REST API
- SQLite for data persistence
- Modular design with pluggable components

SUPPORT
=======
For issues or questions:
1. Check the troubleshooting section above
2. Verify your Python version is 3.12+
3. Ensure all dependencies are installed correctly
4. Check the API documentation at /docs endpoint

PROJECT STRUCTURE
==================
identity_factory/     # Main package
├── api/             # REST API endpoints
├── database.py      # Data persistence
├── factory_manager.py # Main factory class
├── seed_generator.py # Circuit generation
├── unroller.py      # Circuit unrolling
├── post_processor.py # Post-processing
└── ml_features.py   # ML analysis

sat_revsynth/        # SAT synthesis engine
├── circuit/         # Circuit representation
├── synthesizers/    # Synthesis algorithms
├── sat/            # SAT solver interface
└── truth_table/    # Truth table operations

LAST UPDATED: January 2025
VERSION: 1.0.0
PYTHON: 3.12+ 